# AimHelper Pro - CI/CD Pipeline
name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: aimhelper_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/aimhelper_test
      run: |
        npx prisma generate
        npx prisma db push

    - name: Run tests
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/aimhelper_test
        JWT_SECRET: test_jwt_secret_for_testing_only
        SESSION_SECRET: test_session_secret_for_testing_only
      run: npm test

    - name: Run linting
      run: npm run lint

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd /opt/aimhelper

          # Pull latest code
          git pull origin main

          # Update environment variables
          echo "${{ secrets.PRODUCTION_ENV }}" > .env

          # Pull latest Docker images
          docker compose pull

          # Run database migrations
          docker compose run --rm app npx prisma migrate deploy

          # Restart services with zero downtime
          docker compose up -d --force-recreate

          # Cleanup old images
          docker image prune -f

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()

    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "üöÄ Deployment successful! AimHelper Pro is live."

    - name: Notify failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed! Check logs immediately."
        exit 1